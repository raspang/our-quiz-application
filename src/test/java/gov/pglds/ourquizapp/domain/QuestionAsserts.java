package gov.pglds.ourquizapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllPropertiesEquals(Question expected, Question actual) {
        assertQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllUpdatablePropertiesEquals(Question expected, Question actual) {
        assertQuestionUpdatableFieldsEquals(expected, actual);
        assertQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAutoGeneratedPropertiesEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableFieldsEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question relevant properties")
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getQuestionText()).as("check questionText").isEqualTo(actual.getQuestionText()))
            .satisfies(e -> assertThat(e.getDifficultyLevel()).as("check difficultyLevel").isEqualTo(actual.getDifficultyLevel()))
            .satisfies(e -> assertThat(e.getCorrectAnswer()).as("check correctAnswer").isEqualTo(actual.getCorrectAnswer()))
            .satisfies(e -> assertThat(e.getEnable()).as("check enable").isEqualTo(actual.getEnable()))
            .satisfies(e -> assertThat(e.getCorrectAnswer2()).as("check correctAnswer2").isEqualTo(actual.getCorrectAnswer2()))
            .satisfies(e -> assertThat(e.getCorrectAnswer3()).as("check correctAnswer3").isEqualTo(actual.getCorrectAnswer3()))
            .satisfies(e -> assertThat(e.getCorrectAnswer4()).as("check correctAnswer4").isEqualTo(actual.getCorrectAnswer4()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableRelationshipsEquals(Question expected, Question actual) {}
}
